package sign1

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// Cross-tests against sample Sign1 from AWS COSE repo tests
// https://github.com/awslabs/aws-nitro-enclaves-cose
func Test_canValidateAWSSampleSign1(t *testing.T) {
	sign1, err := FromBytes([]byte{
		0x84, 0x44, 0xa1, 0x01, 0x38, 0x22, 0xa1, 0x04, 0x42, 0x31, 0x31, 0x58, 0x75, 0x49, 0x74, 0x20,
		0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x75, 0x74, 0x68, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65,
		0x72, 0x73, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
		0x67, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67,
		0x6c, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,
		0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x66,
		0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
		0x69, 0x6e, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x77, 0x69, 0x66,
		0x65, 0x2e, 0x58, 0x60, 0xcd, 0x42, 0xd2, 0x76, 0x32, 0xd5, 0x41, 0x4e, 0x4b, 0x54, 0x5c, 0x95,
		0xfd, 0xe6, 0xe3, 0x50, 0x5b, 0x93, 0x58, 0x0f, 0x4b, 0x77, 0x31, 0xd1, 0x4a, 0x86, 0x52, 0x31,
		0x75, 0x26, 0x6c, 0xde, 0xb2, 0x4a, 0xff, 0x2d, 0xe3, 0x36, 0x4e, 0x9c, 0xee, 0xe9, 0xf9, 0xf7,
		0x95, 0xa0, 0x15, 0x15, 0x5b, 0xc7, 0x12, 0xaa, 0x28, 0x63, 0xe2, 0xaa, 0xf6, 0x07, 0x8a, 0x81,
		0x90, 0x93, 0xfd, 0xfc, 0x70, 0x59, 0xa3, 0xf1, 0x46, 0x7f, 0x64, 0xec, 0x7e, 0x22, 0x1f, 0xd1,
		0x63, 0xd8, 0x0b, 0x3b, 0x55, 0x26, 0x25, 0xcf, 0x37, 0x9d, 0x1c, 0xbb, 0x9e, 0x51, 0x38, 0xcc,
		0xd0, 0x7a, 0x19, 0x31,
	})
	require.NoError(t, err)
	require.NotNil(t, sign1)

	err = sign1.Validate(&ecdsa.PublicKey{
		Curve: elliptic.P384(),
		X: big.NewInt(0).SetBytes([]byte{
			0x5a, 0x82, 0x9f, 0x62, 0xf2, 0xf4, 0xf0, 0x95, 0xc0, 0xe9, 0x22, 0x71, 0x92, 0x85, 0xb4, 0xb9,
			0x81, 0xc6, 0x77, 0x91, 0x28, 0x70, 0xa4, 0x13, 0x13, 0x7a, 0x5d, 0x73, 0x19, 0x91, 0x6f, 0xa8,
			0x58, 0x4a, 0x60, 0x36, 0x95, 0x1d, 0x06, 0xff, 0xea, 0xe9, 0x9c, 0xa7, 0x3a, 0xb1, 0xa2, 0xdc,
		}),
		Y: big.NewInt(0).SetBytes([]byte{
			0xe1, 0xb7, 0x6e, 0x08, 0xcb, 0x20, 0xd6, 0xaf, 0xce, 0xa7, 0x42, 0x3f, 0x8b, 0x49, 0xec, 0x84,
			0x1d, 0xde, 0x6f, 0x21, 0x0a, 0x61, 0x74, 0x75, 0x0b, 0xf8, 0x13, 0x6a, 0x31, 0x54, 0x94, 0x22,
			0x4d, 0xf1, 0x53, 0x18, 0x45, 0x57, 0xa6, 0xc2, 0x9a, 0x1d, 0x79, 0x94, 0x80, 0x4f, 0x60, 0x4c,
		}),
	})
	assert.NoError(t, err)
}

func Test_FromBytes_invalidMessage(t *testing.T) {
	_, err := FromBytes([]byte{1, 2, 3})
	assert.Error(t, err)
}
